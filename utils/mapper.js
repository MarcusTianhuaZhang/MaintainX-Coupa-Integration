//need more detailed status ENUM in MaintainX
const statusMapping = {
  APPROVED: 'issued',
  CANCELED: 'cancelled',
  COMPLETED: 'closed',
  DECLINED: 'error',  // Assuming declined is an error in Coupa
  PARTIALLY_FULFILLED: 'expensed',  // Assuming partially fulfilled is expensed in Coupa
  PENDING: 'supplier_hold',  // Assuming pending is similar to supplier_hold in Coupa
  REQUESTED: 'buyer_hold',  // assuming requested could mean on hold by the buyer in Coupa
};

// Function to map MaintainX status to Coupa status
function mapStatus(maintainXStatus) {
  return statusMapping[maintainXStatus] || 'draft'; // Default to 'draft' if no match is found
}

//map MaintainX data to create Order_lines in Coupa
const mapMaintainXToCoupaOrderLines = (maintainXItems) => {
  return maintainXItems.map(item => ({
    manufacturer_part_number: item.partNumber,
    description: item.name,
    quantity: item.quantityOrdered,
    price: { amount: item.unitCost },
    total_amount: item.price,
    external_reference_number: purchaseOrderId
  }));
};

//Map MaintainX data to create address in Coupa
const mapMaintainXToCoupaAddress = (maintainXAddress) => {
  return {
    city: maintainXAddress.city,
    country: maintainXAddress.country,
    postal_code: maintainXAddress.postalCode,
    state: maintainXAddress.state,
    street1: maintainXAddress.street,
    attention: maintainXAddress.label,
  };
};

const mapMaintainXToCoupa = (maintainXPO) => {

    const poData = {
    requester: maintainXPO.newPurchaseOrder.creatorId,//if they have the same ID across two systems, if not can hard code the ID mapping
    supplier: maintainXPO.newPurchaseOrder.vendorId, //Globol supplier ID
    currency: maintainXPO.newPurchaseOrder.extraFields.currency,
    po_number: maintainXPO.newPurchaseOrder.overrideNumber || maintainXPO.newPurchaseOrder.autoGeneratedNumber,
    version: 1,
    order_lines: orderLineIds.map(id => ({ id })),
    };
 // Add the address only if a valid addressId is provided
    if (addressId) {
      poData.ship_to_address = { id: addressId };
    }

    return poData;
};

// Function to map MaintainX Purchase Order Change to Coupa format
const mapMaintainXToCoupaPOChange = async (maintainXData, originalPO) => {
  const changes = {};

  // Check if the original PO is closed, throw an error if so
  if (originalPO.status === 'closed') {
    throw new Error(`Purchase order number ${maintainXData.purchaseOrderId} is closed. Cannot make changes.`);
  }

  // Required field for PO Change API
  changes["order-header-id"] = maintainXData.purchaseOrderId;

  // Map status change using the statusMapping
  const maintainXStatus = maintainXData.newPurchaseOrder.status;
  const coupaStatus = statusMapping[maintainXStatus] || 'draft';  // Default to 'draft' if no match is found

  if (coupaStatus !== originalPO.status) {
    changes.status = coupaStatus;
  }

  // Handle due date change
  if (maintainXData.newPurchaseOrder.dueDate !== originalPO.dueDate) {
    changes.due_date = maintainXData.newPurchaseOrder.dueDate;
  }

  // Handle override number change
  if (maintainXData.newPurchaseOrder.overrideNumber !== originalPO.po_number) {
    changes.po_number = maintainXData.newPurchaseOrder.overrideNumber;
  }

  // Handle shipping address change
  if (JSON.stringify(maintainXData.newPurchaseOrder.shippingAddress) !== JSON.stringify(originalPO.shipping_address)) {
    const newAddressId = await createCoupaAddress(mapMaintainXToCoupaAddress(maintainXData.newPurchaseOrder.shippingAddress));
    changes.ship_to_address = { id: newAddressId };
  }

  // Handle order line changes
  if (JSON.stringify(maintainXData.newPurchaseOrder.items) !== JSON.stringify(originalPO.order_lines)) {
    const newOrderLineIds = await createCoupaOrderLines(mapMaintainXToCoupaOrderLines(maintainXData.newPurchaseOrder.items));
    changes.order_lines = newOrderLineIds.map(id => ({ id }));
  }

  // Handle attachments change
  if (JSON.stringify(maintainXData.newPurchaseOrder.attachments) !== JSON.stringify(originalPO.attachments)) {
    await uploadPOAttachments(maintainXData.newPurchaseOrder.attachments, maintainXData.purchaseOrderId);
  }

  // Handle vendor change
  if (maintainXData.newPurchaseOrder.vendorId !== originalPO.supplier.id) {
    changes.supplier = maintainXData.newPurchaseOrder.vendorId;
  }

  // Handle extra fields change
  if (JSON.stringify(maintainXData.newPurchaseOrder.extraFields) !== JSON.stringify(originalPO.extra_fields)) {
    changes.extra_fields = maintainXData.newPurchaseOrder.extraFields;
  }

  return changes;
};

module.exports = { mapMaintainXToCoupa, mapMaintainXToCoupaPOChange };

